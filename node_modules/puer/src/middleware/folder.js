// Generated by CoffeeScript 1.4.0

var fs = require('fs');
var libPath = require('path');
var libUrl = require('url');
var ejs = require('ejs');
var helper = require('../util/helper');

var tpl = fs.readFileSync( libPath.join(__dirname, '../resource/template/folder.html'), 'utf8');
var render = ejs.compile(tpl);



module.exports = function(options) {
  var app = options.app;


  return function(req, res, next) {
    var pathname = libUrl.parse(req.url).pathname;
    var path = libPath.join( options.dir, pathname );

    if(pathname !== "/"){
      var prevpath = pathname.replace(/\/[^\/]*\/?$/, '')
    }

    return fs.stat(path, function(err, stats) {
      var files, folders;
      if ((err != null) || !stats.isDirectory()) {
        return next();
      }
      // res.non_inject = true;
      files = [];
      folders = [];
      return fs.readdir( path, function ( err, subs ) {
        var body;
        if (err != null) {
          return next();
        }
        subs.forEach(function(file) {
          var filepath;
          filepath = libPath.join(path, file);
          if (fs.statSync(filepath).isFile()) {
            files.push(file);
          }
          if (fs.statSync(filepath).isDirectory()) {
            return folders.push(file);
          }
        });
        var locals = {
          join: libPath.join,
          files: files,
          folders: folders,
          prevpath: prevpath,
          inspectHost: getInspectUrl(req, options.inspect),
          pathname: pathname,
          options: options,
          ips: helper.getIPs(),
          qrcode: helper.getQRCode( helper.getFullUrl( req ), 2).createImgTag(4)
        }
        var body = render( locals );
        res.setHeader("Content-Type", "text/html");
        res.setHeader("Content-Length", Buffer.byteLength(body));
        return res.send(body);
      });
    });
  };
};


function getInspectUrl(req, inspect){
  if(!inspect) return null;
  return 'http://' + req.get('host').replace(/\:\d+/, '') + ":" + inspect + "/client/#anonymous";
}
